//global variables for communication between callback function and main
double amp_cmd;
double freq_cmd;

bool callback(kmb172_p2::SinCommandMsgRequest& request,kmb172_p2::SinCommandMsgResponse& response)
{

    //read in desired values from data structure, set global variables accordingly
    ROS_INFO("callback activated");
    double reqd_amp_cmd(request.ampCommand);//store requested amplitude command
    double reqd_freq_cmd(request.freqCommand);//store requested frequency command
    amp_cmd = reqd_amp_cmd;
    freq_cmd = reqd_freq_cmd;
    
    response.success=true;//actual commands about to be issued

    ROS_INFO("callback returning true");
    return true;
}

int main(int argc, char **argv)
{
    ros::init(argc, argv, "sin_commander_service");//make the node
    ros::NodeHandle n;

    ros::ServiceServer service = n.advertiseService("sin_commander", callback);//add a service component
    ROS_INFO("Ready to command a sine wave.");

    ros::Publisher my_publisher_object = n.advertise<std_msgs::Float64>("vel_cmd", 1);//add a publisher component

    //almost everything below this line was from P1

    double pubRate = 1000.0;//the rate at which vel_cmd will be published to
    std_msgs::Float64 vel_desired;// the data that I will modify and publish with

    double sin_arg = 0.0;//will be the input to the sin function
    double time = 0.0;
    double pi = 3.14159;

    ros::Rate naptime(pubRate);//create a ros object from the ros “Rate” class; 
    //set the sleep timer for 5Hz repetition rate (arg is in units of Hz)

    while(ros::ok) {
        time = fmod((time + (1/pubRate)), (1/freq_cmd));//determines location in current wavelength
        vel_desired.data = amp_cmd * sin(2*pi*freq_cmd*time);//calculates desired velocity
        my_publisher_object.publish(vel_desired); // publish the value--of type Float64-- 
        //to the topic "topic1"
	ROS_INFO("amp_cmd = %f", amp_cmd);
        ROS_INFO("freq_cmd = %f", freq_cmd);
	ROS_INFO("time = %f", time);
        ros::spinOnce();
        naptime.sleep();
    }

    ros::spin();

    return 0;
}
